// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: outbox_events.sql

package db

import (
	"context"
)

const createOutboxEvent = `-- name: CreateOutboxEvent :one
INSERT INTO outbox_events (aggregate_id, event_type, payload) 
VALUES ($1, $2, $3) RETURNING id, aggregate_id, event_type, payload, created_at, published_at
`

type CreateOutboxEventParams struct {
	AggregateID string `json:"aggregateId"`
	EventType   string `json:"eventType"`
	Payload     []byte `json:"payload"`
}

func (q *Queries) CreateOutboxEvent(ctx context.Context, arg *CreateOutboxEventParams) (*OutboxEvent, error) {
	row := q.db.QueryRow(ctx, createOutboxEvent, arg.AggregateID, arg.EventType, arg.Payload)
	var i OutboxEvent
	err := row.Scan(
		&i.ID,
		&i.AggregateID,
		&i.EventType,
		&i.Payload,
		&i.CreatedAt,
		&i.PublishedAt,
	)
	return &i, err
}

const getUnpublishedEvents = `-- name: GetUnpublishedEvents :many
SELECT id, aggregate_id, event_type, payload, created_at, published_at FROM outbox_events 
WHERE published_at IS NULL 
ORDER BY created_at ASC 
LIMIT $1
`

func (q *Queries) GetUnpublishedEvents(ctx context.Context, limit int32) ([]*OutboxEvent, error) {
	rows, err := q.db.Query(ctx, getUnpublishedEvents, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*OutboxEvent
	for rows.Next() {
		var i OutboxEvent
		if err := rows.Scan(
			&i.ID,
			&i.AggregateID,
			&i.EventType,
			&i.Payload,
			&i.CreatedAt,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markEventAsPublished = `-- name: MarkEventAsPublished :exec
UPDATE outbox_events 
SET published_at = CURRENT_TIMESTAMP 
WHERE id = $1
`

func (q *Queries) MarkEventAsPublished(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, markEventAsPublished, id)
	return err
}
